{"version":3,"file":"index.browser.min.js","sources":["../package.json","../src/index.ts"],"sourcesContent":["{\n  \"name\": \"plugin-moving-dots-2\",\n  \"version\": \"0.0.1\",\n  \"description\": \"moving dots but better\",\n  \"type\": \"module\",\n  \"main\": \"dist/index.cjs\",\n  \"exports\": {\n    \"import\": \"./dist/index.js\",\n    \"require\": \"./dist/index.cjs\"\n  },\n  \"typings\": \"dist/index.d.ts\",\n  \"unpkg\": \"dist/index.browser.min.js\",\n  \"files\": [\n    \"src\",\n    \"dist\"\n  ],\n  \"source\": \"src/index.ts\",\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"npm test -- --watch\",\n    \"tsc\": \"tsc\",\n    \"build\": \"rollup --config\",\n    \"build:watch\": \"npm run build -- --watch\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"\",\n    \"directory\": \"./\"\n  },\n  \"keywords\": [\n    \"jsPsych\"\n  ],\n  \"author\": {\n    \"name\": \"ollie & noah\",\n    \"url\": \"\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"/issues\"\n  },\n  \"homepage\": \"/plugin-moving-dots-2/README.md\",\n  \"dependencies\": {\n    \"jspsych\": \"^8.0.0\",\n    \"@citation-js/core\": \"^0.7.14\",\n    \"@citation-js/plugin-software-formats\": \"^0.6.1\",\n    \"@citation-js/plugin-bibtex\": \"^0.7.14\",\n    \"@citation-js/plugin-cff\": \"^0.6.1\"\n  },\n  \"devDependencies\": {\n    \"@jspsych/config\": \"^3.2.2\",\n    \"@jspsych/test-utils\": \"^1.0.0\"\n  }\n}\n","import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"plugin-moving-dots-2\",\n  version: version,\n  parameters: {\n    /** Array of control change levels (e.g., 30%, 70%, 100%) */\n    control_levels: {\n      type: ParameterType.INT,\n      array: true,\n      default: [30, 70, 100],\n    },\n    /** Number of dots to display on the screen */\n    dot_count: {\n      type: ParameterType.INT,\n      default: 10,\n    },\n    /** Duration of the flash in milliseconds */\n    flash_duration: {\n      type: ParameterType.INT,\n      default: 200,\n    },\n    /** Total duration of the trial in milliseconds */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: 5000,\n    },\n    /** Initial level of control the mouse has over the dots (0-100) */\n    initial_control_level: {\n      type: ParameterType.INT,\n      default: 100,\n    },\n    /** Change in the level of control of the flashing dot after it changes (0-100) */\n    control_change_level: {\n      type: ParameterType.INT,\n      default: 30,\n    },\n    /** 2-dimensional array of mouse data for playback */\n    playback: {\n      type: ParameterType.OBJECT,\n      array: true,\n      default: [] as Array<{ dx: number; dy: number; t: number }>,\n    },\n  },\n  data: {\n    /** Magnitude of the control change (e.g., 30, 70, 100) */\n    control_change: {\n      type: ParameterType.INT,\n    },\n  },\n  // When you run build on your plugin, citations will be generated here based on the information in the CITATION.cff file.\n  citations: \"__CITATIONS__\",\n};\n\ntype Info = typeof info;\n\n/**\n * **plugin-moving-dots-2**\n *\n * Handles moving series of dots that move at the same speed in response to user input; one dot will flash red and change control level. Implemented as part of an experiment for COGS-219; replicating the paper \"Control Changes the Way We Look at the World\" by Wen & Haggard.\n *\n * @author Ollie & Noah\n * @see {@link /plugin-moving-dots-2/README.md}\n */\nclass MovingDots2Plugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // Create a canvas to display the dots\n    const canvas = document.createElement(\"canvas\");\n\n    //FIND THIS\n    canvas.width = 800;\n    canvas.height = 600;\n\n    display_element.appendChild(canvas);\n    const ctx = canvas.getContext(\"2d\");\n\n    const INITIAL_DISTANCE_FROM_CENTER = 100; // Set maximum distance from the center\n\n    // Initialize dot positions and control levels\n    const dots: { x: number; y: number; control: number }[] = [];\n    for (let i = 0; i < trial.dot_count; i++) {\n      const angle = Math.random() * 2 * Math.PI;\n      const distance = Math.random() * INITIAL_DISTANCE_FROM_CENTER;\n      dots.push({\n        x: canvas.width / 2 + distance * Math.cos(angle),\n        y: canvas.height / 2 + distance * Math.sin(angle),\n        control: trial.initial_control_level, // Initial control level\n      });\n    }\n\n    // Flash one dot and change its control level after a random delay\n    const flashIndex = 0;\n    const controlChange = trial.control_change_level;\n    const flashDelay = 2500 + Math.random() * 500; // Random delay between 2500-3000 ms\n\n    let flashStartTime: number | null = null;\n    let hasFlashed = false;\n    let controlModified = false;\n\n    const data = [];\n    let frame = 0;\n\n    // Render dots, cross, and control value\n    const renderDotsAndCross = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      // Render cross at the center\n      ctx.beginPath();\n      ctx.moveTo(canvas.width / 2 - 10, canvas.height / 2);\n      ctx.lineTo(canvas.width / 2 + 10, canvas.height / 2);\n      ctx.moveTo(canvas.width / 2, canvas.height / 2 - 10);\n      ctx.lineTo(canvas.width / 2, canvas.height / 2 + 10);\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Render dots\n      dots.forEach((dot, index) => {\n        ctx.beginPath();\n        ctx.arc(dot.x, dot.y, 5, 0, 2 * Math.PI);\n        if (flashStartTime && Date.now() - flashStartTime < trial.flash_duration) {\n          ctx.fillStyle = index === flashIndex ? \"red\" : \"black\";\n        } else {\n          ctx.fillStyle = \"black\";\n        }\n        ctx.fill();\n      });\n    };\n\n    // Handle mouse/touchpad input\n    let mouseX = 0,\n      mouseY = 0,\n      dx = 0,\n      dy = 0;\n    let isFirstMove = true;\n    canvas.addEventListener(\"mousemove\", (e) => {\n      const newMouseX = e.offsetX;\n      const newMouseY = e.offsetY;\n      if (isFirstMove) {\n        mouseX = newMouseX;\n        mouseY = newMouseY;\n        isFirstMove = false;\n      } else {\n        dx = newMouseX - mouseX;\n        dy = newMouseY - mouseY;\n        mouseX = newMouseX;\n        mouseY = newMouseY;\n      }\n    });\n\n    // Update dot positions based on control\n    const updateDots = (vx: number, vy: number) => {\n      dots.forEach((dot, index) => {\n        if (index === flashIndex && hasFlashed) {\n          dot.x += vx * (dot.control / 100);\n          dot.y += vy * (dot.control / 100);\n        } else {\n          dot.x += vx * (dot.control / 100); // Initial control level for other dots\n          dot.y += vy * (dot.control / 100);\n        }\n      });\n    };\n\n    // Animation loop\n    let startTime = Date.now();\n    let lastFrameTime = startTime;\n    const animate = () => {\n      const currentTime = Date.now();\n      const elapsedTime = currentTime - startTime;\n      const t = elapsedTime;\n      lastFrameTime = currentTime;\n\n      if (elapsedTime >= flashDelay && !flashStartTime) {\n        flashStartTime = Date.now();\n      }\n      if (flashStartTime && Date.now() - flashStartTime >= trial.flash_duration) {\n        hasFlashed = true;\n        if (!controlModified) {\n          if (trial.initial_control_level === 100) {\n            dots[flashIndex].control = dots[flashIndex].control - controlChange;\n          } else if (trial.initial_control_level === 0) {\n            dots[flashIndex].control = dots[flashIndex].control + controlChange;\n          }\n          controlModified = true;\n        }\n      }\n\n      //main loop\n      if (flashStartTime && Date.now() - flashStartTime < 1500) {\n        updateDots(dx, dy);\n        renderDotsAndCross();\n        data.push({ dx, dy, t });\n        frame++;\n        requestAnimationFrame(animate);\n      } else {\n        endTrial();\n      }\n    };\n    animate();\n\n    // End trial\n    const endTrial = () => {\n      display_element.innerHTML = \"\"; // Clear the canvas\n      this.jsPsych.finishTrial({\n        control_change: controlChange,\n        mouse_data: data,\n      });\n    };\n  }\n}\n\nexport default MovingDots2Plugin;"],"names":["version","info","ParameterType","MovingDots2Plugin","jsPsych","display_element","trial","canvas","ctx","INITIAL_DISTANCE_FROM_CENTER","dots","i","angle","distance","flashIndex","controlChange","flashDelay","flashStartTime","controlModified","data","renderDotsAndCross","dot","index","mouseX","mouseY","dx","dy","isFirstMove","e","newMouseX","newMouseY","updateDots","vx","vy","startTime","animate","currentTime","elapsedTime","t","endTrial"],"mappings":"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"}