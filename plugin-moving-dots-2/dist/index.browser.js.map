{"version":3,"file":"index.browser.js","sources":["../package.json","../src/index.ts"],"sourcesContent":["{\n  \"name\": \"plugin-moving-dots-2\",\n  \"version\": \"0.0.1\",\n  \"description\": \"moving dots but better\",\n  \"type\": \"module\",\n  \"main\": \"dist/index.cjs\",\n  \"exports\": {\n    \"import\": \"./dist/index.js\",\n    \"require\": \"./dist/index.cjs\"\n  },\n  \"typings\": \"dist/index.d.ts\",\n  \"unpkg\": \"dist/index.browser.min.js\",\n  \"files\": [\n    \"src\",\n    \"dist\"\n  ],\n  \"source\": \"src/index.ts\",\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"npm test -- --watch\",\n    \"tsc\": \"tsc\",\n    \"build\": \"rollup --config\",\n    \"build:watch\": \"npm run build -- --watch\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"\",\n    \"directory\": \"./\"\n  },\n  \"keywords\": [\n    \"jsPsych\"\n  ],\n  \"author\": {\n    \"name\": \"ollie & noah\",\n    \"url\": \"\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"/issues\"\n  },\n  \"homepage\": \"/plugin-moving-dots-2/README.md\",\n  \"dependencies\": {\n    \"jspsych\": \"^8.0.0\",\n    \"@citation-js/core\": \"^0.7.14\",\n    \"@citation-js/plugin-software-formats\": \"^0.6.1\",\n    \"@citation-js/plugin-bibtex\": \"^0.7.14\",\n    \"@citation-js/plugin-cff\": \"^0.6.1\"\n  },\n  \"devDependencies\": {\n    \"@jspsych/config\": \"^3.2.2\",\n    \"@jspsych/test-utils\": \"^1.0.0\"\n  }\n}\n","import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"plugin-moving-dots-2\",\n  version: version,\n  parameters: {\n    /** Array of control change levels (e.g., 30%, 70%, 100%) */\n    control_levels: {\n      type: ParameterType.INT,\n      array: true,\n      default: [30, 70, 100],\n    },\n    /** Number of dots to display on the screen */\n    dot_count: {\n      type: ParameterType.INT,\n      default: 10,\n    },\n    /** Duration of the flash in milliseconds */\n    flash_duration: {\n      type: ParameterType.INT,\n      default: 200,\n    },\n    /** Total duration of the trial in milliseconds */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: 5000,\n    },\n    /** Initial level of control the mouse has over the dots (0-100) */\n    initial_control_level: {\n      type: ParameterType.INT,\n      default: 100,\n    },\n    /** Change in the level of control of the flashing dot after it changes (0-100) */\n    control_change_level: {\n      type: ParameterType.INT,\n      default: 30,\n    },\n    /** 2-dimensional array of mouse data for playback */\n    playback: {\n      type: ParameterType.OBJECT,\n      array: true,\n      default: [] as Array<{ dx: number; dy: number; t: number }>,\n    },\n  },\n  data: {\n    /** Magnitude of the control change (e.g., 30, 70, 100) */\n    control_change: {\n      type: ParameterType.INT,\n    },\n  },\n  // When you run build on your plugin, citations will be generated here based on the information in the CITATION.cff file.\n  citations: \"__CITATIONS__\",\n};\n\ntype Info = typeof info;\n\n/**\n * **plugin-moving-dots-2**\n *\n * Handles moving series of dots that move at the same speed in response to user input; one dot will flash red and change control level. Implemented as part of an experiment for COGS-219; replicating the paper \"Control Changes the Way We Look at the World\" by Wen & Haggard.\n *\n * @author Ollie & Noah\n * @see {@link /plugin-moving-dots-2/README.md}\n */\nclass MovingDots2Plugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // Create a canvas to display the dots\n    const canvas = document.createElement(\"canvas\");\n\n    //FIND THIS\n    canvas.width = 800;\n    canvas.height = 600;\n\n    display_element.appendChild(canvas);\n    const ctx = canvas.getContext(\"2d\");\n\n    const INITIAL_DISTANCE_FROM_CENTER = 100; // Set maximum distance from the center\n\n    // Initialize dot positions and control levels\n    const dots: { x: number; y: number; control: number }[] = [];\n    for (let i = 0; i < trial.dot_count; i++) {\n      const angle = Math.random() * 2 * Math.PI;\n      const distance = Math.random() * INITIAL_DISTANCE_FROM_CENTER;\n      dots.push({\n        x: canvas.width / 2 + distance * Math.cos(angle),\n        y: canvas.height / 2 + distance * Math.sin(angle),\n        control: trial.initial_control_level, // Initial control level\n      });\n    }\n\n    // Flash one dot and change its control level after a random delay\n    const flashIndex = 0;\n    const controlChange = trial.control_change_level;\n    const flashDelay = 2500 + Math.random() * 500; // Random delay between 2500-3000 ms\n\n    let flashStartTime: number | null = null;\n    let hasFlashed = false;\n    let controlModified = false;\n\n    const data = [];\n    let frame = 0;\n\n    // Render dots, cross, and control value\n    const renderDotsAndCross = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      // Render cross at the center\n      ctx.beginPath();\n      ctx.moveTo(canvas.width / 2 - 10, canvas.height / 2);\n      ctx.lineTo(canvas.width / 2 + 10, canvas.height / 2);\n      ctx.moveTo(canvas.width / 2, canvas.height / 2 - 10);\n      ctx.lineTo(canvas.width / 2, canvas.height / 2 + 10);\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Render dots\n      dots.forEach((dot, index) => {\n        ctx.beginPath();\n        ctx.arc(dot.x, dot.y, 5, 0, 2 * Math.PI);\n        if (flashStartTime && Date.now() - flashStartTime < trial.flash_duration) {\n          ctx.fillStyle = index === flashIndex ? \"red\" : \"black\";\n        } else {\n          ctx.fillStyle = \"black\";\n        }\n        ctx.fill();\n      });\n    };\n\n    // Handle mouse/touchpad input\n    let mouseX = 0,\n      mouseY = 0,\n      dx = 0,\n      dy = 0;\n    let isFirstMove = true;\n    canvas.addEventListener(\"mousemove\", (e) => {\n      const newMouseX = e.offsetX;\n      const newMouseY = e.offsetY;\n      if (isFirstMove) {\n        mouseX = newMouseX;\n        mouseY = newMouseY;\n        isFirstMove = false;\n      } else {\n        dx = newMouseX - mouseX;\n        dy = newMouseY - mouseY;\n        mouseX = newMouseX;\n        mouseY = newMouseY;\n      }\n    });\n\n    // Update dot positions based on control\n    const updateDots = (vx: number, vy: number) => {\n      dots.forEach((dot, index) => {\n        if (index === flashIndex && hasFlashed) {\n          dot.x += vx * (dot.control / 100);\n          dot.y += vy * (dot.control / 100);\n        } else {\n          dot.x += vx * (dot.control / 100); // Initial control level for other dots\n          dot.y += vy * (dot.control / 100);\n        }\n      });\n    };\n\n    // Animation loop\n    let startTime = Date.now();\n    let lastFrameTime = startTime;\n    const animate = () => {\n      const currentTime = Date.now();\n      const elapsedTime = currentTime - startTime;\n      const t = elapsedTime;\n      lastFrameTime = currentTime;\n\n      if (elapsedTime >= flashDelay && !flashStartTime) {\n        flashStartTime = Date.now();\n      }\n      if (flashStartTime && Date.now() - flashStartTime >= trial.flash_duration) {\n        hasFlashed = true;\n        if (!controlModified) {\n          if (trial.initial_control_level === 100) {\n            dots[flashIndex].control = dots[flashIndex].control - controlChange;\n          } else if (trial.initial_control_level === 0) {\n            dots[flashIndex].control = dots[flashIndex].control + controlChange;\n          }\n          controlModified = true;\n        }\n      }\n\n      //main loop\n      if (flashStartTime && Date.now() - flashStartTime < 1500) {\n        updateDots(dx, dy);\n        renderDotsAndCross();\n        data.push({ dx, dy, t });\n        frame++;\n        requestAnimationFrame(animate);\n      } else {\n        endTrial();\n      }\n    };\n    animate();\n\n    // End trial\n    const endTrial = () => {\n      display_element.innerHTML = \"\"; // Clear the canvas\n      this.jsPsych.finishTrial({\n        control_change: controlChange,\n        mouse_data: data,\n      });\n    };\n  }\n}\n\nexport default MovingDots2Plugin;"],"names":["ParameterType"],"mappings":";;;EAEE,IAAW,OAAA,GAAA,OAAA;;ECEb,MAAM,IAAc,GAAA;EAAA,EAClB,IAAM,EAAA,sBAAA;EAAA,EACN,OAAA;EAAA,EACA,UAAY,EAAA;EAAA;EAAA,IAEV,cAAgB,EAAA;EAAA,MACd,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,KAAO,EAAA,IAAA;EAAA,MACP,OAAS,EAAA,CAAC,EAAI,EAAA,EAAA,EAAI,GAAG,CAAA;EAAA,KACvB;EAAA;EAAA,IAEA,SAAW,EAAA;EAAA,MACT,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,EAAA;EAAA,KACX;EAAA;EAAA,IAEA,cAAgB,EAAA;EAAA,MACd,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,GAAA;EAAA,KACX;EAAA;EAAA,IAEA,cAAgB,EAAA;EAAA,MACd,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,GAAA;EAAA,KACX;EAAA;EAAA,IAEA,qBAAuB,EAAA;EAAA,MACrB,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,GAAA;EAAA,KACX;EAAA;EAAA,IAEA,oBAAsB,EAAA;EAAA,MACpB,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,EAAA;EAAA,KACX;EAAA;EAAA,IAEA,QAAU,EAAA;EAAA,MACR,MAAMA,qBAAc,CAAA,MAAA;EAAA,MACpB,KAAO,EAAA,IAAA;EAAA,MACP,SAAS,EAAC;EAAA,KACZ;EAAA,GACF;EAAA,EACA,IAAM,EAAA;EAAA;EAAA,IAEJ,cAAgB,EAAA;EAAA,MACd,MAAMA,qBAAc,CAAA,GAAA;EAAA,KACtB;EAAA,GACF;EAAA;EAAA,EAEA,SAAW,EAAA,eAAA;EACb,CAAA,CAAA;EAYA,MAAM,iBAAiD,CAAA;EAAA,EAGrD,YAAoB,OAAkB,EAAA;EAAlB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;EAAA,GAAmB;EAAA,EAFvC;EAAA,IAAA,IAAA,CAAO,IAAO,GAAA,IAAA,CAAA;EAAA,GAAA;EAAA,EAId,KAAA,CAAM,iBAA8B,KAAwB,EAAA;EAE1D,IAAM,MAAA,MAAA,GAAS,QAAS,CAAA,aAAA,CAAc,QAAQ,CAAA,CAAA;EAG9C,IAAA,MAAA,CAAO,KAAQ,GAAA,GAAA,CAAA;EACf,IAAA,MAAA,CAAO,MAAS,GAAA,GAAA,CAAA;EAEhB,IAAA,eAAA,CAAgB,YAAY,MAAM,CAAA,CAAA;EAClC,IAAM,MAAA,GAAA,GAAM,MAAO,CAAA,UAAA,CAAW,IAAI,CAAA,CAAA;EAElC,IAAA,MAAM,4BAA+B,GAAA,GAAA,CAAA;EAGrC,IAAA,MAAM,OAAoD,EAAC,CAAA;EAC3D,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,CAAM,WAAW,CAAK,EAAA,EAAA;EACxC,MAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,MAAO,EAAA,GAAI,IAAI,IAAK,CAAA,EAAA,CAAA;EACvC,MAAM,MAAA,QAAA,GAAW,IAAK,CAAA,MAAA,EAAW,GAAA,4BAAA,CAAA;EACjC,MAAA,IAAA,CAAK,IAAK,CAAA;EAAA,QACR,GAAG,MAAO,CAAA,KAAA,GAAQ,IAAI,QAAW,GAAA,IAAA,CAAK,IAAI,KAAK,CAAA;EAAA,QAC/C,GAAG,MAAO,CAAA,MAAA,GAAS,IAAI,QAAW,GAAA,IAAA,CAAK,IAAI,KAAK,CAAA;EAAA,QAChD,SAAS,KAAM,CAAA,qBAAA;EAAA;EAAA,OAChB,CAAA,CAAA;EAAA,KACH;EAGA,IAAA,MAAM,UAAa,GAAA,CAAA,CAAA;EACnB,IAAA,MAAM,gBAAgB,KAAM,CAAA,oBAAA,CAAA;EAC5B,IAAA,MAAM,UAAa,GAAA,IAAA,GAAO,IAAK,CAAA,MAAA,EAAW,GAAA,GAAA,CAAA;EAE1C,IAAA,IAAI,cAAgC,GAAA,IAAA,CAAA;EACpC,IAAA,IAAI,UAAa,GAAA,KAAA,CAAA;EACjB,IAAA,IAAI,eAAkB,GAAA,KAAA,CAAA;EAEtB,IAAA,MAAM,OAAO,EAAC,CAAA;EAId,IAAA,MAAM,qBAAqB,MAAM;EAC/B,MAAA,GAAA,CAAI,UAAU,CAAG,EAAA,CAAA,EAAG,MAAO,CAAA,KAAA,EAAO,OAAO,MAAM,CAAA,CAAA;EAE/C,MAAA,GAAA,CAAI,SAAU,EAAA,CAAA;EACd,MAAA,GAAA,CAAI,OAAO,MAAO,CAAA,KAAA,GAAQ,IAAI,EAAI,EAAA,MAAA,CAAO,SAAS,CAAC,CAAA,CAAA;EACnD,MAAA,GAAA,CAAI,OAAO,MAAO,CAAA,KAAA,GAAQ,IAAI,EAAI,EAAA,MAAA,CAAO,SAAS,CAAC,CAAA,CAAA;EACnD,MAAA,GAAA,CAAI,OAAO,MAAO,CAAA,KAAA,GAAQ,GAAG,MAAO,CAAA,MAAA,GAAS,IAAI,EAAE,CAAA,CAAA;EACnD,MAAA,GAAA,CAAI,OAAO,MAAO,CAAA,KAAA,GAAQ,GAAG,MAAO,CAAA,MAAA,GAAS,IAAI,EAAE,CAAA,CAAA;EACnD,MAAA,GAAA,CAAI,WAAc,GAAA,OAAA,CAAA;EAClB,MAAA,GAAA,CAAI,SAAY,GAAA,CAAA,CAAA;EAChB,MAAA,GAAA,CAAI,MAAO,EAAA,CAAA;EAGX,MAAK,IAAA,CAAA,OAAA,CAAQ,CAAC,GAAA,EAAK,KAAU,KAAA;EAC3B,QAAA,GAAA,CAAI,SAAU,EAAA,CAAA;EACd,QAAI,GAAA,CAAA,GAAA,CAAI,IAAI,CAAG,EAAA,GAAA,CAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAI,GAAA,IAAA,CAAK,EAAE,CAAA,CAAA;EACvC,QAAA,IAAI,kBAAkB,IAAK,CAAA,GAAA,EAAQ,GAAA,cAAA,GAAiB,MAAM,cAAgB,EAAA;EACxE,UAAI,GAAA,CAAA,SAAA,GAAY,KAAU,KAAA,UAAA,GAAa,KAAQ,GAAA,OAAA,CAAA;EAAA,SAC1C,MAAA;EACL,UAAA,GAAA,CAAI,SAAY,GAAA,OAAA,CAAA;EAAA,SAClB;EACA,QAAA,GAAA,CAAI,IAAK,EAAA,CAAA;EAAA,OACV,CAAA,CAAA;EAAA,KACH,CAAA;EAGA,IAAA,IAAI,SAAS,CACX,EAAA,MAAA,GAAS,CACT,EAAA,EAAA,GAAK,GACL,EAAK,GAAA,CAAA,CAAA;EACP,IAAA,IAAI,WAAc,GAAA,IAAA,CAAA;EAClB,IAAO,MAAA,CAAA,gBAAA,CAAiB,WAAa,EAAA,CAAC,CAAM,KAAA;EAC1C,MAAA,MAAM,YAAY,CAAE,CAAA,OAAA,CAAA;EACpB,MAAA,MAAM,YAAY,CAAE,CAAA,OAAA,CAAA;EACpB,MAAA,IAAI,WAAa,EAAA;EACf,QAAS,MAAA,GAAA,SAAA,CAAA;EACT,QAAS,MAAA,GAAA,SAAA,CAAA;EACT,QAAc,WAAA,GAAA,KAAA,CAAA;EAAA,OACT,MAAA;EACL,QAAA,EAAA,GAAK,SAAY,GAAA,MAAA,CAAA;EACjB,QAAA,EAAA,GAAK,SAAY,GAAA,MAAA,CAAA;EACjB,QAAS,MAAA,GAAA,SAAA,CAAA;EACT,QAAS,MAAA,GAAA,SAAA,CAAA;EAAA,OACX;EAAA,KACD,CAAA,CAAA;EAGD,IAAM,MAAA,UAAA,GAAa,CAAC,EAAA,EAAY,EAAe,KAAA;EAC7C,MAAK,IAAA,CAAA,OAAA,CAAQ,CAAC,GAAA,EAAK,KAAU,KAAA;EAC3B,QAAI,IAAA,KAAA,KAAU,cAAc,UAAY,EAAA;EACtC,UAAI,GAAA,CAAA,CAAA,IAAK,EAAM,IAAA,GAAA,CAAI,OAAU,GAAA,GAAA,CAAA,CAAA;EAC7B,UAAI,GAAA,CAAA,CAAA,IAAK,EAAM,IAAA,GAAA,CAAI,OAAU,GAAA,GAAA,CAAA,CAAA;EAAA,SACxB,MAAA;EACL,UAAI,GAAA,CAAA,CAAA,IAAK,EAAM,IAAA,GAAA,CAAI,OAAU,GAAA,GAAA,CAAA,CAAA;EAC7B,UAAI,GAAA,CAAA,CAAA,IAAK,EAAM,IAAA,GAAA,CAAI,OAAU,GAAA,GAAA,CAAA,CAAA;EAAA,SAC/B;EAAA,OACD,CAAA,CAAA;EAAA,KACH,CAAA;EAGA,IAAI,IAAA,SAAA,GAAY,KAAK,GAAI,EAAA,CAAA;EAEzB,IAAA,MAAM,UAAU,MAAM;EACpB,MAAM,MAAA,WAAA,GAAc,KAAK,GAAI,EAAA,CAAA;EAC7B,MAAA,MAAM,cAAc,WAAc,GAAA,SAAA,CAAA;EAClC,MAAA,MAAM,CAAI,GAAA,WAAA,CAAA;EAGV,MAAI,IAAA,WAAA,IAAe,UAAc,IAAA,CAAC,cAAgB,EAAA;EAChD,QAAA,cAAA,GAAiB,KAAK,GAAI,EAAA,CAAA;EAAA,OAC5B;EACA,MAAA,IAAI,kBAAkB,IAAK,CAAA,GAAA,EAAQ,GAAA,cAAA,IAAkB,MAAM,cAAgB,EAAA;EACzE,QAAa,UAAA,GAAA,IAAA,CAAA;EACb,QAAA,IAAI,CAAC,eAAiB,EAAA;EACpB,UAAI,IAAA,KAAA,CAAM,0BAA0B,GAAK,EAAA;EACvC,YAAA,IAAA,CAAK,UAAU,CAAE,CAAA,OAAA,GAAU,IAAK,CAAA,UAAU,EAAE,OAAU,GAAA,aAAA,CAAA;EAAA,WACxD,MAAA,IAAW,KAAM,CAAA,qBAAA,KAA0B,CAAG,EAAA;EAC5C,YAAA,IAAA,CAAK,UAAU,CAAE,CAAA,OAAA,GAAU,IAAK,CAAA,UAAU,EAAE,OAAU,GAAA,aAAA,CAAA;EAAA,WACxD;EACA,UAAkB,eAAA,GAAA,IAAA,CAAA;EAAA,SACpB;EAAA,OACF;EAGA,MAAA,IAAI,cAAkB,IAAA,IAAA,CAAK,GAAI,EAAA,GAAI,iBAAiB,IAAM,EAAA;EACxD,QAAA,UAAA,CAAW,IAAI,EAAE,CAAA,CAAA;EACjB,QAAmB,kBAAA,EAAA,CAAA;EACnB,QAAA,IAAA,CAAK,IAAK,CAAA,EAAE,EAAI,EAAA,EAAA,EAAI,GAAG,CAAA,CAAA;EAEvB,QAAA,qBAAA,CAAsB,OAAO,CAAA,CAAA;EAAA,OACxB,MAAA;EACL,QAAS,QAAA,EAAA,CAAA;EAAA,OACX;EAAA,KACF,CAAA;EACA,IAAQ,OAAA,EAAA,CAAA;EAGR,IAAA,MAAM,WAAW,MAAM;EACrB,MAAA,eAAA,CAAgB,SAAY,GAAA,EAAA,CAAA;EAC5B,MAAA,IAAA,CAAK,QAAQ,WAAY,CAAA;EAAA,QACvB,cAAgB,EAAA,aAAA;EAAA,QAChB,UAAY,EAAA,IAAA;EAAA,OACb,CAAA,CAAA;EAAA,KACH,CAAA;EAAA,GACF;EACF;;;;;;;;"}